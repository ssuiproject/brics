/*
	* Mighty grid - Is transformed to fit the 'Styleship grid List Templates'. 
	* Version 1.3.2
	* Edit 24. March. 2014
	* www.styleship.com
	* By Woos / Multimedia team Director;
	*
	* 본 소스는 법으로 보호되는 Styleship의 지적재산으로서
	* 본 제작자와 회사의 허가를 받지 않은 사용자 혹은 사이트에서 무단 사용시  
	* 민형사상의 처벌 및 배상의 책임이 있습니다.
	* 
	ⓒ Styleship inc. All Right Reserved.
	* update 
	* v1.3.2	사용되는 XML 노드체계 Mighty 표준으로 변경. 이벤트 트리거 파라메터네임 체계 버그 방지 패치. (데이터 로드시... data 파라메터가 아니라 xml로.)
	* v1.3.1	간혹 행의 마지막 그리드가 채워지지 않는 버그 패치.
	* v1.3.0	minGridLine, maxGridLine설정을 통해 최대/최소 정렬방향 그리드 갯수 정의 추가.(ex : 세로 방향 소팅일 경우 가로 최대/최소 그리드 갯수) 
	* v1.2.0	스테이지보다 넓은 그리드를 차지하는 아이템 제외하지 않도록 하는 패치
*/

function MightyGrid(container, options) {
	return container.mightyGrid(options);
}
(function(ssq){
	ssq.fn.mightyGrid= function(options){
		
		var plugin = new Object();
		var content = this;
		plugin.content = this;
		var _el = content.attr("id") ? "#"+content.attr("id") : "."+content.attr("class").split(" ")[0];
		var container = ssq(this);
		
		var defaultSetting, optn, change, config, getCode, getXML, buildContent, interact;
		
		defaultSetting = {
			autoFit			: null,
			autoResizeContainer : true,
			dataURL: null,
		 	debug_mode: false,
			gridWidth			: 100,
			gridHeight			: 100,
			item_click_handler : null,
		 	margin			: 0,
			maxAreaHeight		: null,
			maxAreaWidth		: null,
			maxGridLine			: null,
			minAreaHeight		: null,
			minAreaWidth		: null,
			minGridLine			: null,
			randomDelay		: 0,
			sortDirection	: "y",
			speed	: 300
		};
		optn = ssq.extend(defaultSetting, options);
		
		content.areaWidth;
		content.areaHeight;
		content.numItems = 0;
		content.numCol = 0;
		content.numRow = 0;
		content.currentItem = 0;
		content.areaMinHeight = optn.minAreaHeight;
		content.areaMaxHeight = optn.maxAreaHeight;
		content.areaMinWidth = optn.minAreaWidth;
		content.areaMaxWidth = optn.maxAreaWidth;
		content.dataXML;
		content.dataList = new Array();
		content.category = new Array();
		
		var _grid = new Array();
		var _gridW, _gridH, _findLine, _maxLine;
		var _sortDir = optn.sortDirection == "y" ? "top" : "left";
		var _sortTrn = optn.sortDirection == "y" ? "left" : "top";
		var _stepDir, _stepTrn;
		var _readyGoViewNum = false;
		var _tweenProgress = 0;
		var _originalCoding;
		
		init = function(){
			container.css("opacity", 0);
			getCodingData();
			if (optn.dataURL)	content.loadXML(optn.dataURL, true);
			else	content.refresh(true);
		};
		
		function getCodingData(){
			_originalCoding = container.html();
			if (container.children("li").size() == 0) return;

			content.trigger({type:"datacomplete", dataType:"html", html: _originalCoding});
			container.children("li").each(function(i){
				var codeItem = ssq(this);
				var newItem = new Object();
				changeAttrName(codeItem, "command", "data-command");
				changeAttrName(codeItem, "grid-colspan", "data-colspan");
				changeAttrName(codeItem, "grid-rowspan", "data-rowspan");
				
				newItem.htmlData = codeItem.html();
				
				newItem.command = codeItem.attr("data-command") ? Number(codeItem.attr("data-command")) : null;
				newItem.colspan = codeItem.attr("data-colspan") ? Number(codeItem.attr("data-colspan")) : 1;
				newItem.rowspan = codeItem.attr("data-rowspan") ? Number(codeItem.attr("data-rowspan")) : 1;
				codeItem.css({"position":"absolute", "opacity":0});
				codeItem.data("itemNo", i);
				codeItem.bind("click", function(e){
					var obj = ssq(this);
					var no = obj.data("itemNo");
					content.trigger({type:"choice", target:obj, no:no});
				});
				codeItem.mouseenter(mouseEnterItem);
				codeItem.mouseleave(mouseLeaveItem);
				codeItem.find("a, button, input").data("dataItem", codeItem);
				codeItem.find("a, button, input").bind("focusin", function(){
					var dataItem = ssq(this).data("dataItem");
					content.trigger({type:"itemover", target:dataItem, no:dataItem.data("itemNo")});
				});
				codeItem.find("a, button, input").bind("focusout", function(){
					var dataItem = ssq(this).data("dataItem");
					if (ssq(document.activeElement).closest(dataItem).length == 0){
						content.trigger({type:"itemout", target:dataItem, no:dataItem.data("itemNo")});
					}
				});
				content.numItems = container.children("li").size();
				content.trigger({type:"added", no: i, dataType:"html", itemHTML:newItem.htmlData, html: _originalCoding, target:codeItem});
				content.dataList.push(newItem);
			});
			content.trigger({type:"addcomplete", dataType:"html", html: _originalCoding});
		}
		function mouseEnterItem (e) {
			var obj = ssq(this);
			var no = obj.data("itemNo");
			content.trigger({type:"itemover", target:obj, no:no});
		}
		function mouseLeaveItem (e) {
			var obj = ssq(this);
			var no = obj.data("itemNo");
			content.trigger({type:"itemout", target:obj, no:no});
		}
		function changeAttrName(obj, BeforeAttr, newAttr) {
			if (obj.attr(BeforeAttr)) {
				obj.attr(newAttr, obj.attr(BeforeAttr));
				obj.removeAttr(BeforeAttr);
			}
		}
		
		
		content.loadXML = function(arg, addVar){
			if (!arg) return;
			if (!isString(arg)) return;
			if (arg.length <= 4) return;
			
			if (addVar != true) {
				optn.dataURL = arg;
				container.html("");
				content.dataList = new Array();
				_readyGoViewNum = false;
			}
			
			var ajaxOpt = {
				url: arg,
				dataType: "xml",
				success: buildContentData,
				error: function(xhr, textStatus, errorThrown){
					if (optn.debug_mode) 
						alert("요청 정보를 가져올 수 없습니다!  (" + errorThrown + ")");
				}
			};
			ssq.ajax(ajaxOpt);
		};
		buildContentData = function(data){
			content.dataXML = data;
			content.category = buildCategoryData(data);
			var items = ssq(data).find("content");
			content.trigger({type:"datacomplete", dataType:"xml", xml: data});
			items.each(function(i, element){
				var addItem, addHTML;
				var tmpObj = ssq(this);
				var itmDataTmp = new Object();
				itmDataTmp.data = tmpObj;
				itmDataTmp.htmlData = tmpObj.find("htmlData").size()>0 ? tmpObj.find("htmlData").text() : tmpObj.text();
				if (tmpObj.find("command")) itmDataTmp.command = tmpObj.find("command").text();
				else itmDataTmp.command = codeItem.attr("data-command") ? codeItem.attr("data-command") : null;
				itmDataTmp.colspan = tmpObj.attr("data-colspan") ? Number(tmpObj.attr("data-colspan")) : 1;
				itmDataTmp.rowspan = tmpObj.attr("data-rowspan") ? Number(tmpObj.attr("data-rowspan")) : 1;
				itmDataTmp.css = tmpObj.attr("data-class") ? 'class="' + tmpObj.attr("data-class")+'" ' : "";
				itmDataTmp.id = tmpObj.attr("data-id") ? 'id="' + tmpObj.attr("data-id")+'" ' : "";
				itmDataTmp.style = tmpObj.attr("data-style") ? 'style="' + tmpObj.attr("data-style")+'" ' : "";
				content.dataList.push(itmDataTmp);
				addHTML = '<li '+itmDataTmp.id+itmDataTmp.css+itmDataTmp.style+' data-colspan="'+itmDataTmp.colspan+'" data-rowspan="'+itmDataTmp.rowspan+'">'+itmDataTmp.htmlData+'</li>';
				container.append(addHTML);
				addItem = container.children("li:last");
				addItem.css("opacity", 0);
				addItem.data("itemNo", i);
				if (optn.item_click_handler) addItem.bind(function(){
					setItemClickHandler(tmpObj);
				});

				content.numItems = container.children("li").size();
				content.trigger({type:"added", dataType:"xml", no:i, itemHTML:itmDataTmp.htmlData, xml: data, target:addItem});
			});
			content.trigger({type:"addcomplete", dataType:"xml", xml: data});
			content.refresh(true);
		};
		function buildCategoryData(data) {
			var categoryList = new Array();
			var categoryData = ssq(data).find("category");
			categoryData.each(function(i){
				var categoryTmp = new Object();
				var cateObj = ssq(this);
				categoryTmp.current = cateObj.attr("current") ? (( cateObj.attr("current").toLowerCase() == "yes") ? true : false) : false;
				categoryTmp.titleData = cateObj.text();
				categoryTmp.command = ( cateObj.attr("command")) ? cateObj.attr("command") : categoryTmp.titleData;
				categoryList.push(categoryTmp);
			});
			return categoryList;
		}
		content.refresh = function (noTween){
			createGrid();
			setListGrid();
			setListStatus(noTween);
			if (_sortDir == "top") content.trigger({type:"changestart", gridWidth:_stepTrn - optn.margin, gridHeight:_stepDir - optn.margin, numCol:content.numCol, numRow:content.numRow});
			else content.trigger({type:"changestart", gridWidth:_stepDir - optn.margin, gridHeight:_stepTrn - optn.margin, numCol:content.numRow, numRow:content.numCol});
			_readyGoViewNum = true;
		};
		content.changeNo = function (no){
			createGrid();
			content.currentItem = Math.min(0, content.numItems-1);
			content.currentItem = Math.max(0, no);
			container.children("li").css("display", "none");
			if (_readyGoViewNum) content.refresh();
		};
		content.setMinAreaWidth = function (value) {
			content.areaMinWidth =  value;
			optn.minAreaWidth =  value;
			content.refresh();
		};
		content.setMaxAreaWidth = function (value) {
			content.areaMaxWidth =  value;
			optn.maxAreaWidth =  value;
			content.refresh();
		};
		content.setMaxAreaHeight = function (value) {
			content.areaMaxHeight =  value;
			optn.maxAreaHeight =  value;
			content.refresh();
		};
		content.setMinAreaHeight = function (value) {
			content.areaMinHeight =  value;
			optn.minAreaHeight =  value;
			content.refresh();
		};
		
		function createGrid() {
			var y, x;
			_gridW = _gridWD();
			_gridH = _gridHG();
			_grid = new Array();
			for (y = 0; y < _gridH; y++){
				_grid[y] = new Array();
				for (x = 0; x < _gridW; x++) {
					_grid[y][x] = null;
				}
			}
		}
		function setListGrid() {
			_findLine = 0;
			_maxLine = 0;
			var step_i = 0;
			for (var i = content.currentItem; i < content.dataList.length; i++){
				findAndSetGrid(i, content.dataList[i].rowspan, content.dataList[i].colspan);
				step_i++;
			}
			if (_sortDir == "top") {
				content.numCol = _gridW;
				content.numRow = _maxLine;
			} else {
				content.numCol = _maxLine;
				content.numRow = _gridW;
			}
		}

		function setListStatus(noTween) {
			var y, x, no, gridItem, itemPrt;
			_tweenProgress = 0;
			var limSize;
			for (y=0; y < _maxLine; y++) {
				for (x=0; x < _grid[y].length; x++) {
					if (_grid[y][x] && _grid[y][x].substr(0,1) != "@") {
						no = Number(_grid[y][x]);
						gridItem = container.children("li:eq("+no+")");
						limSize = limitedSize(content.dataList[no].rowspan, content.dataList[no].colspan);
						itemPrt = new Object();
						itemPrt.position = "absolute";
						if (_sortDir == "top") {
							itemPrt.left = x * _stepTrn;
							itemPrt.top = y * _stepDir;
							itemPrt.width = Math.ceil(limSize.col * _stepTrn - optn.margin);
							itemPrt.height = Math.ceil(limSize.row * _stepDir - optn.margin);
						} else {
							itemPrt.left = y * _stepTrn;
							itemPrt.top = x * _stepDir;
							itemPrt.width = Math.ceil(limSize.col * _stepDir - optn.margin);
							itemPrt.height = Math.ceil(limSize.row * _stepTrn - optn.margin);
						}
						if (noTween) {
							itemPrt.opacity=0;
							gridItem.stop(true).css(itemPrt).css(itemPrt);
						} else {
							var spdVar = optn.speed/1000;
							var delayVar = optn.randomDelay ? no*Math.random()*.2*optn.randomDelay / 1000+0.5 : 0;
							if (!optn.speed) gridItem.css(itemPrt);
							else {
							_tweenProgress++;
							TweenMax.to(gridItem, spdVar, {
											css:itemPrt,
											delay:delayVar,
											ease:Expo.easeOut,
											onStart:changeSortEventTime,
											onUpdate:changeSortEventTime,
											onComplete:completeSortEventTime,
											overwrite:1
									});
							}
						}
						if (!optn.speed) gridItem.css({"opacity": 1});
						else {
							TweenMax.to(gridItem, spdVar * 0.7, 
								{ css: {"opacity": 1}, delay: delayVar + spdVar * 0.3}
							);
						}
					}
				}
			}
			if (!optn.speed) {
				if (_sortDir == "top") content.trigger({type:"changecomplete", gridWidth:_stepTrn - optn.margin, gridHeight:_stepDir - optn.margin, numCol:content.numCol, numRow:content.numRow});
				else content.trigger({type:"changecomplete", gridWidth:_stepDir - optn.margin, gridHeight:_stepTrn - optn.margin, numCol:content.numRow, numRow:content.numCol});
			}
			container.css("opacity", 1);
			if (optn.autoResizeContainer) {
				if (_sortDir == "top") {
					trace("hg", _maxLine * _stepY() - optn.margin);
					if (!optn.speed)  container.css({"overflow":"hidden", "height":_maxLine * _stepY() - optn.margin});
					else {
						TweenMax.to(container, optn.speed/1000, {
							css:{"overflow":"hidden", "height":_maxLine * _stepY() - optn.margin},
							delay:delayVar,
							ease:Expo.easeOut,
							onStart:changeSortEventTime,
							onUpdate:changeSortEventTime,
							onComplete:changeSortEventTime,
							overwrite:1
						});
					}
				} else  {
					if (!optn.speed)  container.css({"overflow":"hidden", "width":_maxLine * _stepX() - optn.margin});
					else {
						TweenMax.to(container, optn.speed/1000, {
							css:{"overflow":"hidden", "width":_maxLine * _stepX() - optn.margin},
							delay:delayVar,
							ease:Expo.easeOut,
							onStart:changeSortEventTime,
							onUpdate:changeSortEventTime,
							onComplete:changeSortEventTime,
							overwrite:1
						});
					}
				}
			}
		}
		function changeSortEventTime() {
			if (_sortDir == "top") content.trigger({type:"changeprogress", gridWidth:_stepTrn - optn.margin, gridHeight:_stepDir - optn.margin, numCol:content.numCol, numRow:content.numRow});
			else content.trigger({type:"changeprogress", gridWidth:_stepDir - optn.margin, gridHeight:_stepTrn - optn.margin, numCol:content.numRow, numRow:content.numCol});
		}
		function completeSortEventTime() {
			changeSortEventTime();
			_tweenProgress--;
			if (_tweenProgress <= 0) {
				if (_sortDir == "top") content.trigger({type:"changecomplete", gridWidth:_stepTrn - optn.margin, gridHeight:_stepDir - optn.margin, numCol:content.numCol, numRow:content.numRow});
				else content.trigger({type:"changecomplete", gridWidth:_stepDir - optn.margin, gridHeight:_stepTrn - optn.margin, numCol:content.numRow, numRow:content.numCol});
			}
		}
		
		function findAndSetGrid(i, row, col) {
			var y, x;
			var isMatch = false; 
			y = _findLine;
			var limSize = limitedSize(row, col);
			while (y+limSize.row <= _gridH) {
				x = 0;
				while (x+limSize.col <= _gridW) {
					if (analysisGrid(y, x, limSize.row, limSize.col)) {
						entryGrid(y, x, limSize.row, limSize.col, i);
						isMatch = true;
						_maxLine = Math.max(_maxLine, y+limSize.row);
						break;
					}
					x++;
				}
				var lineFull = true;
				for (var af = 0 ; af < _gridW; af++){
					if (analysisGrid(_findLine, af, 1, 1)) lineFull = false;
				}
				if (lineFull) _findLine = Math.min(_findLine+1, y);
				if (isMatch) break;
				else y++;
			}
			if (!isMatch) {
				container.children("li:eq("+i+")").css("display", "none");
			} else {
				container.children("li:eq("+i+")").css("display", "block");
			}
		}
		function limitedSize(row, col) {
			var itemSize = {row:row, col:col};
			if (_sortDir == "top") {
				if (itemSize.col > _gridW) {
					itemSize.row = Math.round(itemSize.row * (_gridW / itemSize.col));
					itemSize.row = Math.max(itemSize.row, 1);
					itemSize.col = _gridW;
				}
			} else {
				if (itemSize.row > _gridH) {
					itemSize.col = Math.round(itemSize.col * (_gridH / itemSize.row));
					itemSize.col = Math.max(itemSize.col, 1);
					itemSize.row = _gridH;
				}
			}
			return itemSize;
		}
		
		function analysisGrid(y, x, row, col) {
			var iy,ix;
			if (y + row > _gridH) return false;
			if (x + col > _gridW) return false;
			for (iy = y; iy < y+row; iy++) {
				for (ix = x; ix < x+col; ix++){
					if (_grid[iy][ix]) return false; 
				}
			}
			return true;
		}
		function entryGrid(y, x, row, col, i) {
			var iy,ix;
			for (iy = y; iy < y+row; iy++) {
				for (ix = x; ix < x+col; ix++){
					if (iy == y && ix == x) _grid[iy][ix] = String(i);
					else  _grid[iy][ix] = "@"+String(i);
				}
			}
		}
		function _areaWd() {
			var value;
			if (_sortDir == "top") {
				value = container.width();
				if (content.areaMinWidth) value = Math.max(content.areaMinWidth, value);
				if (content.areaMaxWidth) value = Math.min(content.areaMaxWidth, value);
			} else {
				value = container.height();
				if (content.areaMinHeight) value = Math.max(content.areaMinHeight, value);
				if (content.areaMaxHeight) value = Math.min(content.areaMaxHeight, value);
			}
			return value;
		}
		function _areaHg() {
			var value;
			if (_sortDir == "top") {
				value = container.height();
				if (content.areaMinHeight) value = Math.max(content.areaMinHeight, value);
				if (content.areaMaxHeight) value = Math.min(content.areaMaxHeight, value);
			} else {
				value = container.width();
				if (content.areaMinWidth) value = Math.max(content.areaMinWidth, value);
				if (content.areaMaxWidth) value = Math.min(content.areaMaxWidth, value);
			}
			return value;
		}
		function _stepX () {
			var value, yValue, rate, totalAr, divEa;
			if (_sortDir == "top") {
				value = optn.gridWidth + optn.margin;
				yValue = optn.gridHeight + optn.margin;
			} else {
				value = optn.gridHeight + optn.margin;
				yValue = optn.gridWidth + optn.margin;
			}
			if (optn.autoFit == "x") {
				if (_sortDir == "top") totalAr = _areaWd() + optn.margin;
				else totalAr = _areaHg() + optn.margin;
				divEa = Math.round(totalAr / value);
				if (optn.minGridLine != null) {
					if (divEa < optn.minGridLine) divEa = optn.minGridLine;
				}
				if (optn.maxGridLine != null) {
					if (divEa > optn.maxGridLine) divEa = optn.maxGridLine;
				}
				return totalAr / divEa;
			} else if (optn.autoFit == "y") {
				if (_sortDir == "top") rate = _stepY() / yValue;
				else rate = _stepY() / yValue;
				return value * rate;
			} else {
				return value;	
			}
		}
		function _stepY() {
			var value, xValue, rate, totalAr, divEa;
			if (_sortDir == "top") {
				value = optn.gridHeight + optn.margin;
				xValue = optn.gridWidth + optn.margin;
			} else {
				value = optn.gridWidth + optn.margin;
				xValue = optn.gridHeight + optn.margin;
			}
			if (optn.autoFit == "y") {
				if (_sortDir == "top") totalAr = _areaHg() + optn.margin;
				else totalAr = _areaWd() + optn.margin;
				divEa = Math.round(totalAr / value);
				if (optn.minGridLine != null) {
					if (divEa < optn.minGridLine) divEa = optn.minGridLine;
				}
				if (optn.maxGridLine != null) {
					if (divEa > optn.maxGridLine) divEa = optn.maxGridLine;
				}
				return totalAr / divEa;
			} else if (optn.autoFit == "x") {
				if (_sortDir == "top") rate = _stepX() / xValue;
				else rate = _stepX() / xValue;
				return value*rate;
			} else {
				return value;
			}
		}
		function _gridWD() {
			_stepTrn = _stepX();
			if (_sortDir == "top") {
					/////////////////////////////////////////////////////////////////////////////////////////////////   요기 작업 진행중
				if (optn.autoFit) return Math.round((_areaWd()+optn.margin) / _stepTrn);
				else return Math.floor((_areaWd()+optn.margin) / _stepTrn);
			} else {
				if (optn.autoFit) return Math.round((_areaHg()+optn.margin) / _stepTrn);
				else return Math.floor((_areaHg()+optn.margin) / _stepTrn);
			}
		}
		function _gridHG() {
			_stepDir = _stepY();
			if (_sortDir == "top") {
				if (content.areaMaxHeight) {
					if (optn.autoFit) return Math.round((_areaHg()+optn.margin) / _stepDir);
					else  return Math.floor((_areaHg()+optn.margin) / _stepDir);
				} else {
					if (optn.autoFit) return Math.round(10000 / optn.gridHeight);
					else  return Math.floor(10000 / optn.gridHeight);
				}
			} else {
				if (content.areaMaxWidth) {
					if (optn.autoFit) return Math.round((_areaWd()-+optn.margin) / _stepDir);
					else return Math.floor((_areaWd()-+optn.margin) / _stepDir);
				} else {
					if (optn.autoFit) return Math.round(2560*2 / optn.gridWidth);
					else return Math.floor(2560*2 / optn.gridWidth);
				}
			}
		}
		function setItemClickHandler(item){
			var eventData = new Object();
			eventData.data = content.dataList;
			eventData.no = item.data("itemNo");
			eventData.item = item;
			optn.item_click_handler(eventData);
		}
		function isString(arg) {
			if (typeof(arg) == "string") return true;
			else return false;
		}
		init();
		return content;
		
	};
	
})(jQuery);